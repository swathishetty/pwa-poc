{"version":3,"sources":["serviceWorker.js","App.js","index.js"],"names":["config","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","contactList","_this2","axios","get","then","res","data","setState","react_default","a","createElement","map","contact","class","name","email","company","catchPhrase","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"6JAsByBA,oGCgBNC,cAlCb,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAO,CACVC,YAAc,IAHAR,mFAOE,IAAAS,EAAAN,KAClBO,IAAMC,IAAN,8CACDC,KAAK,SAAAC,GACJ,IAAML,EAAcK,EAAIC,KACxBL,EAAKM,SAAS,CAAEP,mDAKhB,OACEQ,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,cAAQF,EAAAC,EAAAC,cAAA,2BACPf,KAAKI,MAAMC,YAAYW,IAAI,SAACC,GAAD,OAC1BJ,EAAAC,EAAAC,cAAA,OAAKG,MAAM,QACTL,EAAAC,EAAAC,cAAA,OAAKG,MAAM,aACTL,EAAAC,EAAAC,cAAA,MAAIG,MAAM,cAAcD,EAAQE,MAChCN,EAAAC,EAAAC,cAAA,MAAIG,MAAM,iCAAiCD,EAAQG,OACnDP,EAAAC,EAAAC,cAAA,KAAGG,MAAM,aAAaD,EAAQI,QAAQC,yBAzBhCC,aDShBC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAuCN,SAASC,EAAgBC,EAAOrC,GAC9BsC,UAAUC,cACPC,SAASH,GACTtB,KAAK,SAAA0B,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBjC,QACf4B,UAAUC,cAAcO,YAI1BC,QAAQC,IACN,iHAKEhD,GAAUA,EAAOiD,UACnBjD,EAAOiD,SAASR,KAMlBM,QAAQC,IAAI,sCAGRhD,GAAUA,EAAOkD,WACnBlD,EAAOkD,UAAUT,UAO5BU,MAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,KE3FjEC,IAASC,OAAOnC,EAAAC,EAAAC,cAACkC,EAAD,MAASC,SAASC,eAAe,SFmB3B,IAAIC,IAAIC,WAAwB3B,OAAOC,SAAS2B,MACpDC,SAAW7B,OAAOC,SAAS4B,QAOzC7B,OAAO8B,iBAAiB,OAAQ,WAE/B,IAAMzB,EAAK,GAAA0B,OAAMJ,WAAN,sBACXZ,QAAQC,IAAI,eAAeX,GACtBP,GAgEV,SAAiCO,EAAOrC,GAEtCgE,MAAM3B,GACHtB,KAAK,SAAAkD,GAEJ,IAAMC,EAAcD,EAASE,QAAQrD,IAAI,gBAEnB,MAApBmD,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C/B,UAAUC,cAAc+B,MAAMvD,KAAK,SAAA0B,GACjCA,EAAa8B,aAAaxD,KAAK,WAC7BiB,OAAOC,SAASuC,aAKpBpC,EAAgBC,EAAOrC,KAG1BmD,MAAM,WACLJ,QAAQC,IACN,mEArFAyB,CAAwBpC,EAAOrC,GAI/BsC,UAAUC,cAAc+B,MAAMvD,KAAK,WACjCgC,QAAQC,IACN,gHAMJZ,EAAgBC,EAAOrC","file":"static/js/main.33088a64.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  // if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n     //commenting const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n     const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n     console.log(' swUrlswUrl ',swUrl);\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  // }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react'\nimport axios from 'axios';\n\n    class App extends Component {\n      constructor(props){\n        super(props);\n        this.state ={\n          contactList : []\n        }\n      }\n    \n      componentDidMount() {\n        axios.get(`https://jsonplaceholder.typicode.com/users`)\n      .then(res => {\n        const contactList = res.data;\n        this.setState({ contactList });\n      })\n      }\n\n      render(){\n        return (\n          <div>\n          <center><h1>Contact List</h1></center>\n          {this.state.contactList.map((contact) => (\n            <div class=\"card\">\n              <div class=\"card-body\">\n                <h5 class=\"card-title\">{contact.name}</h5>\n                <h6 class=\"card-subtitle mb-2 text-muted\">{contact.email}</h6>\n                <p class=\"card-text\">{contact.company.catchPhrase}</p>\n              </div>\n            </div>\n          ))}\n        </div>\n\n        )\n      }\n     \n    }\n    export default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\nserviceWorker.register();\n"],"sourceRoot":""}
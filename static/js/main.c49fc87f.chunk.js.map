{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","sigPad","clear","trim","setState","trimmedDataURL","getTrimmedCanvas","toDataURL","showModal","state","contactList","setModal","bind","assertThisInitialized","handleClose","console","log","_this2","axios","get","then","res","data","_this3","react_default","a","createElement","map","contact","class","name","email","company","catchPhrase","Modal","show","onHide","Header","closeButton","Title","Body","build_default","penColor","canvasProps","width","height","className","ref","Footer","onClick","length","src","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.c49fc87f.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport axios from 'axios';\nimport { Modal } from 'react-bootstrap';\nimport SignatureCanvas from 'react-signature-canvas';\n \n    class App extends Component {\n      constructor(props){\n        super(props);\n        this.state ={\n          contactList: [],\n          showModal: false,\n          trimmedDataURL: '',\n        }\n        this.setModal = this.setModal.bind(this);\n        this.clear = this.clear.bind(this);\n        this.trim = this.trim.bind(this);\n        this.handleClose = this.handleClose.bind(this);\n    }\n      sigPad= {}\n\n      clear = () => {\n        this.sigPad.clear()\n      }\n\n      trim = () => {\n        this.setState({trimmedDataURL: this.sigPad.getTrimmedCanvas()\n          .toDataURL('image/png')})\n          this.setState({showModal: false});\n      }\n      setModal(){\n        console.log('this.state.showModal ',this.state.showModal);\n        this.setState({showModal: true});\n        console.log('this.state.showModal ',this.state.showModal);\n      }\n      handleClose(){\n        this.setState({showModal: false});\n      }\n      componentDidMount() {\n        axios.get(`https://jsonplaceholder.typicode.com/users`)\n      .then(res => {\n        const contactList = res.data;\n        this.setState({ contactList });\n      })\n      }\n\n      render(){\n        let {trimmedDataURL} = this.state;\n        return (\n          <div>\n          <center><h1>Contact List</h1></center>\n          {this.state.contactList.map((contact) => (\n            <div class=\"card\">\n              <div class=\"card-body\">\n                <h5 class=\"card-title\">{contact.name}</h5>\n                <h6 class=\"card-subtitle mb-2 text-muted\">{contact.email}</h6>\n                <p class=\"card-text\">{contact.company.catchPhrase}</p>\n              </div>\n            </div>\n          ))}\n          <Modal show={this.state.showModal} onHide={this.handleClose}>\n          <Modal.Header closeButton>\n            <Modal.Title>Please Sign</Modal.Title>\n          </Modal.Header>\n            <Modal.Body>\n                <SignatureCanvas penColor='green'\n              canvasProps={{width: 500, height: 500, className: 'sigCanvas'}} \n              ref={(ref) => { this.sigPad = ref }}/>\n            </Modal.Body>\n            <Modal.Footer>\n              <button onClick={this.clear}>\n                Clear\n              </button>\n              <button onClick={this.trim}>\n                Sign\n              </button>\n            </Modal.Footer>\n          </Modal>\n          <div onClick={this.setModal}>\n          {\n            trimmedDataURL.length > 0 ?\n            <span>\n            Signature\n            <img src={trimmedDataURL} /> \n            </span>:\n            \"Click to Sign\"\n          }\n          </div>\n        </div>\n        )\n      }\n     \n    }\n    export default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n     //commenting const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n     const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n     console.log(' swUrlswUrl ',swUrl);\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\nserviceWorker.register();\n"],"sourceRoot":""}